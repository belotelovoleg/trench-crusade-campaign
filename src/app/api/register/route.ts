import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

export async function POST(req: Request) {
  const body = await req.json();
  const { login, password, name, email } = body;

  const errors: { field: string; message: string }[] = [];

  // üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤
  if (!login || login.trim() === '') {
    errors.push({ field: 'login', message: '–õ–æ–≥—ñ–Ω –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π' });
  }

  if (!password || password.length < 4) {
    errors.push({ field: 'password', message: '–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 4 —Å–∏–º–≤–æ–ª–∏' });
  }

  if (!email || !email.includes('@')) {
    errors.push({ field: 'email', message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ email –∞–¥—Ä–µ—Å–∞' });
  }

  if (errors.length > 0) {
    return NextResponse.json({ success: false, errors }, { status: 400 });
  }

  try {
    // üö´ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const existing = await prisma.players.findUnique({ where: { login } });
    if (existing) {
      return NextResponse.json({
        success: false,
        errors: [{ field: 'login', message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î' }],
      }, { status: 400 });
    }

    // üîê –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
    const player = await prisma.players.create({
      data: {
        login,
        password_hash: hashedPassword,
        name,
        email,
        idt: new Date(),
      },
    });

    return NextResponse.json({
      success: true,
      player: {
        id: player.id,
        login: player.login,
        email: player.email,
      },
    });
  } catch (error: any) {
    return NextResponse.json({
      success: false,
      errors: [{ field: 'server', message: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ: ' + error.message }],
    }, { status: 500 });
  }
}
